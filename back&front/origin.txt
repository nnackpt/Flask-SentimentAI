from flask import Flask, request, jsonify, render_template
import google.generativeai as genai
from transformers import pipeline

app = Flask(__name__)
app.template_folder = "templates"

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API Key
genai.configure(api_key="*************") 

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
classifier = pipeline("sentiment-analysis")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤
def get_gemini_response(prompt, language):
    model = genai.GenerativeModel("gemini-pro")
    
    if language == "th":
        prompt = f"‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£: {prompt}"
    else:
        prompt = f"Answer this question in English, giving your answer from a business perspective on how you should respond to your customers: {prompt}"

    response = model.generate_content(prompt)
    return response.text

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
def map_sentiment(sentiment_label, score):
    if sentiment_label == "POSITIVE":
        if score > 0.85:
            return "‡∏û‡∏≠‡πÉ‡∏à‡∏°‡∏≤‡∏Å üòä"
        elif score >= 0.65:
            return "‡∏û‡∏≠‡πÉ‡∏à üôÇ"
        else:
            return "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á üòê"

    elif sentiment_label == "NEGATIVE":
        if score >= 0.50:
            return "‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à üòü"
        else:
            return "‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á üò†"

    return "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á üòê"

# ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö
@app.route("/")
def home():
    return render_template("index.html")

# API ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
@app.route("/analyze", methods=["POST"])
def analyze():
    data = request.get_json()
    user_text = data.get("text")
    language = data.get("language", "th")

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    sentiment_result = classifier(user_text)[0]
    sentiment = map_sentiment(sentiment_result["label"], sentiment_result["score"])
    confidence = round(sentiment_result["score"], 2)

    # ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    ai_response = get_gemini_response(user_text, language)

    return jsonify({
        "sentiment": sentiment,
        "confidence": confidence,
        "response": ai_response
    })

# ‡∏Ç‡πâ‡∏≤‡∏° favicon.ico ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î 404
@app.route('/favicon.ico')
def favicon():
    return '', 204

if __name__ == "__main__":
    app.run(debug=True)