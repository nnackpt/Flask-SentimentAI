from flask import Flask, request, jsonify, render_template, redirect, url_for
from flask_cors import CORS
import google.generativeai as genai
from transformers import AutoTokenizer, pipeline
import re
from pythainlp.tokenize import word_tokenize
from datetime import datetime

app = Flask(__name__, static_folder='static')
CORS(app)
app.template_folder = "templates"

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API Key
genai.configure(api_key="*********************")   

# ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
eng_model_name = "cardiffnlp/twitter-roberta-base-sentiment-latest"
thai_model_name = "airesearch/wangchanberta-base-att-spm-uncased"

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÑ‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
eng_tokenizer = AutoTokenizer.from_pretrained(eng_model_name)
eng_classifier = pipeline("sentiment-analysis", model=eng_model_name, tokenizer=eng_tokenizer)

thai_tokenizer = AutoTokenizer.from_pretrained(thai_model_name)
thai_classifier = pipeline("sentiment-analysis", model=thai_model_name, tokenizer=thai_tokenizer)

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å
NEGATIVE_KEYWORDS = [
    "‡∏´‡πà‡∏ß‡∏¢", "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢", "‡πÅ‡∏¢‡πà", "‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á", "‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à", "‡πÄ‡∏•‡∏ß‡∏£‡πâ‡∏≤‡∏¢", 
    "‡∏û‡∏±‡∏á", "‡∏ä‡∏≥‡∏£‡∏∏‡∏î", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á", "‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á", "‡πÇ‡∏Å‡∏á", 
    "‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏õ‡∏Å", "‡πÑ‡∏°‡πà‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡πÑ‡∏°‡πà‡∏î‡∏µ", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û", "‡πÑ‡∏£‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå", 
    "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤", "‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Ç‡∏≤‡∏î‡∏ï‡∏Å", "‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", 
    "‡∏ä‡πâ‡∏≤", "‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤", "‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå", "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏≠‡πâ‡∏≤‡∏á", 
    "‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", "‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å", "‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", 
    "‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏û‡∏≠‡πÉ‡∏à", "‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤", "‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÉ‡∏à", "‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà", 
    "‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à", "‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á", 
    "‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", "‡πÑ‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à", "‡πÑ‡∏°‡πà‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™", "‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå"
]

POSITIVE_KEYWORDS = [
    "‡∏î‡∏µ", "‡∏û‡∏≠‡πÉ‡∏à", "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", "‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à", 
    "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤", "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ", "‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß", "‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 
    "‡∏ô‡πà‡∏≤‡∏û‡∏≠‡πÉ‡∏à", "‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à", "‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö", "‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", 
    "‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û", "‡πÉ‡∏™‡πà‡πÉ‡∏à", "‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏î‡∏µ", 
    "‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏î‡∏µ", "‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", "‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à", "‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™", "‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå", 
    "‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠", "‡∏ô‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à", "‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏≤‡∏î", "‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏°‡∏≤‡∏¢", 
    "‡∏ô‡πà‡∏≤‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô", "‡∏ô‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠", "‡∏ô‡πà‡∏≤‡∏•‡∏≠‡∏á", 
    "‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à", "‡∏ô‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°", "‡∏ô‡πà‡∏≤‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™", "‡∏ô‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°"
]

def detect_keywords(text):
    text = text.lower()
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö
    positive_count = sum(1 for keyword in POSITIVE_KEYWORDS if keyword in text)
    negative_count = sum(1 for keyword in NEGATIVE_KEYWORDS if keyword in text)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥
    if positive_count > negative_count:
        return "positive"
    elif negative_count > positive_count:
        return "negative"
    
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None
    return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
def preprocess_text(text, language):
    text = text.lower().strip()
    text = re.sub(r"[^\w\s]", "", text)  # ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    
    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    max_length = 512  # ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    if len(text) > max_length:
        text = text[:max_length]
    
    if language == "th":
        text = " ".join(word_tokenize(text))  # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    return text

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
def map_sentiment(sentiment_label, score, language):
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "negative" (‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à) ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á"
    if sentiment_label in ["neg", "negative"]:
        if score > 0.8:
            return "‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á üò†"  # ‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å
        elif score > 0.6:
            return "‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à üòü"  # ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        else:
            return "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á üòê"  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "positive" (‡∏û‡∏≠‡πÉ‡∏à)
    elif sentiment_label in ["pos", "positive"]:
        if score > 0.9:
            return "‡∏û‡∏≠‡πÉ‡∏à‡∏°‡∏≤‡∏Å üòä"  # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏≠‡πÉ‡∏à‡∏™‡∏π‡∏á
        elif score > 0.75:
            return "‡∏û‡∏≠‡πÉ‡∏à üôÇ"  # ‡∏û‡∏≠‡πÉ‡∏à‡∏õ‡∏Å‡∏ï‡∏¥
        elif score > 0.5:  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            return "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á üòê"  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á‡∏û‡∏≠
        else:
            return "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á üòê"  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÑ‡∏î‡πâ
    return "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á üòê"  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API
def get_gemini_response(prompt, language):
    try:
        model = genai.GenerativeModel("gemini-2.0-flash")
        
        if language == "th":
            prompt = f"‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 300 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: {prompt}"
        else:
            prompt = f"Answer this question in English, giving your answer from a business perspective on how you should respond to your customers, Please provide an answer in no more than 300 characters.: {prompt}"
        
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {e}")
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á"

# ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö
@app.route("/")
def login_page():
    return render_template("login.html")

@app.route("/home")
def home():
    return render_template("index.html")

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
@app.route("/logout")
def logout():
    return redirect(url_for("login_page"))

# ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
analysis_history = []

@app.route("/delete_history", methods=["POST"])
def delete_history():
    try:
        data = request.get_json()
        text_to_delete = data.get("text")

        if not text_to_delete:
            return jsonify({"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö"}), 400

        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        global analysis_history
        analysis_history = [item for item in analysis_history if item["text"] != text_to_delete]

        return jsonify({"success": True})
    except Exception as e:
        print(f"Error during deletion: {e}")
        return jsonify({"success": False, "error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}), 500

# API ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
@app.route("/analyze", methods=["POST"])
def analyze():
    try:
        data = request.get_json()
        user_text = data.get("text")
        language = data.get("language", "th")
        if not user_text or not isinstance(user_text, str):
            return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"}), 400
        
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        processed_text = preprocess_text(user_text, language)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        keyword_sentiment = detect_keywords(user_text)
        if keyword_sentiment == "negative":
            sentiment = "‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à üòü"
            confidence = 0.95
        elif keyword_sentiment == "positive":
            sentiment = "‡∏û‡∏≠‡πÉ‡∏à üôÇ"
            confidence = 0.95
        else:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•
            if language == "th":
                sentiment_result = thai_classifier(processed_text)[0]
            else:
                sentiment_result = eng_classifier(processed_text)[0]
            sentiment = map_sentiment(sentiment_result["label"], sentiment_result["score"], language)
            confidence = round(sentiment_result["score"], 2)
        
        # ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        ai_response = get_gemini_response(user_text, language)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        analysis_history.append({
            "text": user_text,
            "sentiment": sentiment,
            "confidence": confidence,
            "response": ai_response,
            "timestamp": timestamp  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå timestamp
        })
        return jsonify({
            "sentiment": sentiment,
            "confidence": confidence,
            "response": ai_response,
            "timestamp": timestamp  # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ timestamp ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á frontend (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        })
    except Exception as e:
        print(f"Error during analysis: {e}")
        return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á"}), 500
    
# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
@app.route("/history")
def history_page():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timestamp ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    for item in analysis_history:
        if "timestamp" not in item:
            item["timestamp"] = "1970-01-01 00:00:00"  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤ (Newest to Oldest)
    sorted_history = sorted(analysis_history, key=lambda x: x["timestamp"], reverse=True)
    return render_template("history.html", history=sorted_history)

@app.route("/question")
def question():
    return render_template("question.html")

# ‡∏Ç‡πâ‡∏≤‡∏° favicon.ico ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î 404
@app.route('/favicon.ico')
def favicon():
    return '', 204

if __name__ == "__main__":
    app.run(debug=True)